{"version":3,"sources":["components/chat/chat.js","utils/validators.js","constants/apiUrl.js","components/chatMessagesHistory/chatMessages.js","components/userList/userList.js","actions/users-actions/index.js","action-types/users-actionTypes/index.js","actions/messages-actions/index.js","action-types/messages-actionTypes/index.js","actions/checkUser-actions/index.js","action-types/checkUser-actionTypes/index.js","actions/auth-actions/index.js","action-types/auth-actionTypes/index.js","interceptors/auth.interceptor.js","containers/chatPage/chatPage.js","components/formComponent/FormsControls.js","components/registerForm/index.js","containers/registrationPage/Registration.js","actions/registration-actions/index.js","action-types/registration-actionTypes/index.js","components/singInForm/index.js","containers/SingInPage/SingIn.js","utils/guardedRoute.js","components/app/App.js","serviceWorker.js","reducer/inithialState.js","reducer/index.js","reducer/message.redux.js","reducer/registration.redux.js","reducer/auth.redux.js","reducer/users.redux.js","reducer/checkUser.redux.js","services/userCheck.service.js","sagas/checkUser.saga.js","services/auth.service.js","sagas/auth.saga.js","services/message.service.js","services/socket.service.js","sagas/chat.saga.js","services/users.service.js","sagas/user.saga.js","services/registration.service.js","sagas/registration.saga.js","sagas/watchers.js","sagas/index.js","index.js","store/store.js","components/formComponent/FormsControls.module.css"],"names":["socket","minLength","backUrl","chatMessages","this","el","scrollToBottom","scrollIntoView","behavior","messages","props","messageReducer","className","userReducer","recipientUser","map","messageRender","ref","userSender","text","userRecipient","date","_id","token","JSON","parse","localStorage","getItem","senderId","jwt_decode","key","style","id","justifyContent","Component","connect","state","userList","redirect","userObj","getUsersList","errorStatus","from","to","list","usersList","data","usersRender","name","surname","onClick","saveRecipientId","getMessages","getMsg","userCheck","dispatch","type","fetchForList","saveUserToState","userRecipientId","checkUser","logout","Chat","value","handleChange","bind","handleSubmit","keyPressedEnter","senderName","socketIOClient","emit","userId","on","saveNewPrivateMsg","event","setState","target","preventDefault","sendMsg","minDeviceWidth","maxWidth","onSubmit","onKeyPress","placeholder","onChange","src","alt","userRecipientName","msg","sendMessage","interceptors","axios","request","use","config","headers","authorization","error","Promise","reject","ChatPage","console","log","deleteRecipientId","required","undefined","validEmail","test","matchInput","input","allInputs","password","Input","meta","ShowErr","touched","inputError","errorText","minLength8","length","RegisterForm","Field","component","validate","label","reduxForm","form","Registration","submit","SendRegisterData","registrationRedux","isRegister","alert","dataIsSending","SingInForm","SingIn","email","authUser","removeItem","auth","result","success","isLogged","setItem","stringify","authIsSending","GuardedRoute","rest","render","App","path","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","endpoint","appReducer","combineReducers","formReducer","initialState","action","newMsg","uuidv1","Date","res","loadingError","Error","status","errorData","response","checkError","rootReducer","get","userCheckSaga","UserCheck","actions","call","put","post","AuthUser","AuthService","sendPrivateMessage","getMessage","saveNewPrivateMessage","messageSevice","fetchUsersList","UsersService","sendRegisterDatas","registrationUser","RegistrationService","watchUserCheck","watchAuthUser","watchChat","watchUser","watchRegistrationUser","takeEvery","startForman","all","fork","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","runSaga","run","rootSaga","configureStore","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.7a480a0a.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport socketIOClient from \"socket.io-client\";\nimport jwt_decode from \"jwt-decode\";\nimport MediaQuery from 'react-responsive'\nimport {backUrl} from '../../constants/apiUrl'\nimport ChatMessages from '../../components/chatMessagesHistory'\nimport UserList from '../../components/userList';\nimport {sendMessage, saveNewPrivateMsg} from '../../actions/messages-actions'\nimport './chat.css';\nimport './chat.media.css';\nimport '../../media.css'\n\nlet socket;\n\n\nclass Chat extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {value: ''};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.keyPressedEnter = this.keyPressedEnter.bind(this);\n\n    }\n\n    componentDidUpdate() {\n\n\n        const userObj = JSON.parse(localStorage.getItem('user'));\n        if (userObj) {\n            const token = userObj.token;\n            const {_id, name: senderName} = jwt_decode(token);\n            if (this.props.userReducer.recipientUser) {\n                const {id, name} = this.props.userReducer.recipientUser;\n                socket = socketIOClient.connect(backUrl);\n                socket.emit('userId', {userId: _id});\n                socket.on('privateMsg', data => {\n                    this.props.saveNewPrivateMsg(_id, senderName, data, id, name,)\n                });\n            }\n        }\n    }\n\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const userObj = JSON.parse(localStorage.getItem('user'));\n        if (userObj) {\n            const token = userObj.token;\n            const {_id, name: senderName} = jwt_decode(token);\n            const {id, name} = this.props.userReducer.recipientUser;\n            this.props.sendMsg(socket, id, name, this.state.value, _id, senderName);\n            this.setState({value: ''})\n        }\n\n    }\n\n    keyPressedEnter(event) {\n        if (event.key === \"Enter\") {\n            this.handleSubmit(event)\n\n        }\n    }\n\n\n    render() {\n\n        return (\n            <div className={'chatBox'}>\n                <MediaQuery minDeviceWidth={280} maxWidth={768}>\n                    <div className={this.props.userReducer.recipientUser ? 'chatBox__messages' : 'displayNone'}>\n                        <div className={'chatBox__messages__history'}>\n                            <ChatMessages/>\n                        </div>\n                        <div className={'chatBox__messages__typeMess'}>\n                            <form className={'chatBox__messages__typeMess__form'} onSubmit={this.handleSubmit}\n                                  onKeyPress={this.keyPressedEnter}>\n                <textarea placeholder={'Ваше повідомлення'} className={'customInput'}\n                          value={this.state.value} onChange={this.handleChange}/>\n                                <input type='image' src={process.env.PUBLIC_URL + '/sendBtn.png'} alt={'Image'}\n                                       className={'inpImg'}/>\n                            </form>\n                        </div>\n                    </div>\n                    <div className={this.props.userReducer.recipientUser ? 'displayNone' : 'chatBox__UserList'}>\n                        <UserList/>\n                    </div>\n                </MediaQuery>\n\n                <MediaQuery minDeviceWidth={769}>\n                    <div className={'chatBox__messages'}>\n                        <div className={'chatBox__messages__history'}>\n                            <ChatMessages/>\n                        </div>\n                        <div\n                            className={this.props.userReducer.recipientUser ? 'chatBox__messages__typeMess' : 'displayNone'}>\n                            <form\n                                className={'chatBox__messages__typeMess__form'}\n                                onSubmit={this.handleSubmit}\n                                onKeyPress={this.keyPressedEnter}>\n                <textarea placeholder={'Ваше повідомлення'} className={'customInput'}\n                          value={this.state.value} onChange={this.handleChange}/>\n                                <input type='image' src={process.env.PUBLIC_URL + '/sendBtn.png'} alt={'Image'}\n                                       className={'inpImg'}/>\n                            </form>\n                        </div>\n                    </div>\n                    <div className={'chatBox__UserList'}>\n                        <UserList/>\n                    </div>\n                </MediaQuery>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userReducer: state.userReducer\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        sendMsg: (socket, userRecipientId, userRecipientName, msg, senderId, senderName) =>\n            dispatch(sendMessage(socket, userRecipientId, userRecipientName, msg, senderId, senderName)),\n        saveNewPrivateMsg: (userRecipientId, userRecipientName, msg, senderId, senderName) =>\n            dispatch(saveNewPrivateMsg(userRecipientId, userRecipientName, msg, senderId, senderName))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat)","export const required = value =>\n    value ? undefined : 'Field is required';\n\n\nexport const minLengthCreator = (minLength) => (value) =>\n    value.length < minLength ? `Min length is ${minLength} symbols` : undefined;\n\n\nexport const validEmail = value =>\n    value && !/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        .test(value) ? 'Invalid email address' : undefined;\n\n\nexport const matchInput = (input, allInputs) =>\n    input === allInputs.password ? undefined : 'passwords is not concord';","export const backUrl = 'http://localhost:8080';\n// export const backUrl = 'https://pet-project-chat-back.herokuapp.com';\n","import React, {Component} from 'react';\n\nimport './chatMessages.css';\nimport {connect} from \"react-redux\";\nimport jwt_decode from \"jwt-decode\";\n\n\nclass chatMessages extends Component {\n    componentDidMount() {\n        if (this.el) this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n        if (this.el) this.scrollToBottom();\n    }\n\n    scrollToBottom() {\n        if (this.el) this.el.scrollIntoView({behavior: 'smooth'});\n    }\n\n\n    render() {\n\n\n        const messages = this.props.messageReducer.messages;\n        if (messages) {\n            return (\n                <div className={'chatBox__messages__history_box'}>\n                    {this.props.userReducer.recipientUser ?\n                        <div>{messages.map(this.messageRender, this)}\n                            <div ref={el => {\n                                this.el = el\n                            }}/>\n                        </div> :\n                        <div className={'chatBox__messages__history_box__not_selected'}>\n                            <p>Виберіть чат </p>\n                        </div>}\n                </div>\n            )\n        }\n        return(\n            <div>\n                Loading...\n            </div>\n        )\n\n    }\n\n    messageRender({userSender, userRecipient, date, text, _id}) {\n        const userObj = JSON.parse(localStorage.getItem('user'));\n        const token = userObj.token;\n        const {_id: senderId} = jwt_decode(token);\n\n        const right = {\n            justifyContent: 'flex-end'\n        };\n\n\n        return (\n\n            <div key={_id} style={userSender.id === senderId ? right : null}\n                 className={'chatMessages__messageBox'}>\n                <div\n                    className={userSender.id === senderId ? 'chatMessages__message_right' : 'chatMessages__message_left'}>\n                    <p className={'chatMessages__msg'}>{text}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userReducer: state.userReducer,\n        messageReducer: state.messageReducer\n    }\n};\n\nexport default connect(mapStateToProps, null)(chatMessages)","import React, {Component} from 'react';\nimport jwt_decode from \"jwt-decode\";\nimport './userList.css';\n\nimport {connect} from \"react-redux\";\nimport {fetchForList, saveUserToState} from \"../../actions/users-actions\";\n\nimport {getMessages} from \"../../actions/messages-actions\";\nimport {sendDataForCheck} from \"../../actions/checkUser-actions\";\nimport {logout} from \"../../actions/auth-actions\";\nimport {Redirect} from \"react-router-dom\";\n\n\nclass userList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {redirect: false}\n    }\n\n    componentDidMount() {\n        // this.props.checkUser();\n        const userObj = JSON.parse(localStorage.getItem('user'));\n        if (userObj) {\n            const token = userObj.token;\n            const {_id} = jwt_decode(token);\n\n            if (_id !== null) this.props.getUsersList(_id, token)\n        }\n\n    }\n\n\n    render() {\n\n        if (this.props.userReducer.errorStatus === 500) {\n\n            return <Redirect\n                from={'/'}\n                to={'/SingIn'}/>\n\n        }\n        const {list} = this.props.userReducer;\n        if (list) {\n            const {data} = list;\n            const {usersList} = data;\n            return (\n                <div className={'userListBox'}>\n                    <div className={'userListBox__head'}>\n\n                    </div>\n                    <div className={'userListBox__list'}>\n                        {usersList.map(this.usersRender, this)}\n                    </div>\n                </div>\n            )\n        }\n\n\n        return (\n            <div>\n                Loading...\n            </div>\n        )\n    }\n\n    usersRender({_id, name, surname}) {\n\n        const getMsg = (_id, name) => {\n            const userObj = JSON.parse(localStorage.getItem('user'));\n            if (userObj) {\n                const token = userObj.token;\n                this.props.saveRecipientId(_id, name);\n                this.props.getMessages(_id, token)\n            }\n\n        };\n        return (\n            <div key={_id} className={'userListBox__list__users'} onClick={() => getMsg(_id, name)}>\n                <div className={'userListBox__list__userLogo'}>\n\n                </div>\n                <p className={'userName text'}> {name} </p>\n                <p className={'userSurname text'}> {surname} </p>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userReducer: state.userReducer,\n        userCheck: state.userCheck\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getUsersList: (_id, token) => dispatch(fetchForList(_id, token)),\n        saveRecipientId: (_id, name) => dispatch(saveUserToState(_id, name)),\n        getMessages: (userRecipientId, token) => dispatch(getMessages(userRecipientId, token)),\n        checkUser: () => dispatch(sendDataForCheck()),\n        logout: () => dispatch(logout())\n\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(userList);","import {\n    FETCH_FOR_LIST,SAVE_USER_RECIPIENT_TO_STATE, DELETE_USER_RECIPIENT_FROM_STATE\n\n} from '../../action-types/users-actionTypes'\n\nexport const fetchForList = (id, token) => {\n    return {\n        type: FETCH_FOR_LIST,\n        id,\n        token\n    }\n};\nexport const saveUserToState = (id, name) => {\n    return {\n        type: SAVE_USER_RECIPIENT_TO_STATE,\n        id,\n        name\n    }\n};\nexport const deleteUserFromState = () => {\n    return {\n        type: DELETE_USER_RECIPIENT_FROM_STATE,\n\n    }\n};\n","export const USERS_LISTS_IS_LOADING = 'USERS_LISTS_IS_LOADING';\nexport const USERS_LISTS_HAS_LOADED = 'USERS_LISTS_HAS_LOADED';\nexport const ERROR_LOAD_LIST = 'ERROR_LOAD_LIST';\nexport const FETCH_FOR_LIST = 'FETCH_FOR_LIST';\nexport const SAVE_USER_RECIPIENT = 'SAVE_USER_RECIPIENT';\nexport const SAVE_USER_RECIPIENT_TO_STATE= 'SAVE_USER_RECIPIENT_TO_STATE';\nexport const DELETE_USER_RECIPIENT_FROM_STATE= 'DELETE_USER_RECIPIENT_FROM_STATE';","import {SEND_MESSAGE, GET_MESSAGES, SAVE_NEW_PRIVATE_MSG} from '../../action-types/messages-actionTypes'\n\n\nexport const sendMessage = (socket, userRecipientId, userRecipientName, msg, senderId, senderName) => {\n    return {\n        type: SEND_MESSAGE,\n        socket, userRecipientId, userRecipientName, msg, senderId, senderName\n    }\n};\nexport const getMessages = (id, token) => {\n    return {\n        type: GET_MESSAGES,\n        id,\n        token\n    }\n};\nexport const saveNewPrivateMsg = (userRecipientId, userRecipientName, msg, senderId, senderName) => {\n    return {\n        type: SAVE_NEW_PRIVATE_MSG,\n        userRecipientId, userRecipientName, msg, senderId, senderName\n    }\n};\n\n\n\n\n","export const MESSAGES_IS_LOADING = 'MESSAGES_IS_LOADING';\nexport const GET_MESSAGES = 'GET_MESSAGES';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const MESSAGES_HAS_LOADED = 'MESSAGES_HAS_LOADED';\nexport const SAVE_MESSAGE_TO_STATE = 'SAVE_MESSAGE_TO_STATE';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const ERROR_SEND = 'ERROR_SEND';\nexport const SAVE_NEW_PRIVATE_MSG = 'SAVE_NEW_PRIVATE_MSG';","// import UserCheck from '../../services/userCheck.service'\nimport {SEND_DATA_FOR_CHECK} from '../../action-types/checkUser-actionTypes'\n\n\nexport const sendDataForCheck = () => {\n    return {\n        type: SEND_DATA_FOR_CHECK,\n\n    }\n};\n\n\n\n\n","export const ERROR_USER_CHECK = 'ERROR_USER_CHECK';\nexport const SUCCESS_USER_CHECK = 'SUCCESS_USER_CHECK';\nexport const SEND_DATA_FOR_CHECK = 'SEND_DATA_FOR_CHECK';","import {AUTH_IS_SENDING, LOGOUT} from '../../action-types/auth-actionTypes'\n\n\nexport const authIsSending = (email, password) => {\n    return {\n        type: AUTH_IS_SENDING,\n        email,\n        password\n    }\n};\n\nexport const logout = () => {\n  return {\n      type: LOGOUT\n  }\n};\n\n\n\n\n","export const AUTH_IS_ERROR = 'AUTH_IS_ERROR';\nexport const AUTH_IS_SENDING = 'AUTH_IS_SENDING';\nexport const AUTH_IS_SUCCESS = 'AUTH_IS_SUCCESS';\nexport const LOGOUT = 'LOGOUT';\nexport const LOGOUT_USER = 'LOGOUT_USER';","import axios from \"axios/index\";\n\n\nexport const interceptors =(token) => {\n    axios.interceptors.request.use(\n        config => {\n\n            config.headers.authorization = token;\n\n            // config.headers['Content-Type'] = 'application/json';\n            return config;\n        },\n        error => {\n            Promise.reject(error)\n        });\n};","import React, {Component} from 'react';\nimport './chatPage.css';\nimport MediaQuery from 'react-responsive'\n\nimport {connect} from \"react-redux\";\nimport Chat from '../../components/chat'\nimport {interceptors} from \"../../interceptors/auth.interceptor\";\nimport {Redirect} from \"react-router-dom\";\nimport {deleteUserFromState} from \"../../actions/users-actions\";\n\n\nclass ChatPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {redirect: false}\n    }\n\n    componentDidMount() {\n        const user = localStorage.getItem('user');\n\n        if (user !== null) {\n            const userObj = JSON.parse(localStorage.getItem('user'));\n            interceptors(userObj.token);\n\n        }\n    }\n\n    redirect = () => {\n        this.setState({redirect: true})\n    };\n\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect\n                from={'/'}\n                to={'/SingIn'}/>\n        }\n        //Button for return to main page\n        const backButton = () => {\n            console.log('back')\n            this.props.deleteRecipientId()\n        };\n\n        return (\n\n            <div className={'generalBox'}>\n                <MediaQuery minDeviceWidth={280} maxWidth={768}>\n                    <div className={'generalBox__media'}>\n                        <div className={'generalBox__media__header'}>\n                            <div\n                                className={this.props.userReducer.recipientUser ? 'generalBox__media__header__backImg' : 'displayNone'}>\n                                <img src={process.env.PUBLIC_URL + '/replydark.png'} onClick={() => backButton()}\n                                     alt=\"\"/>\n                            </div>\n                        </div>\n                        <Chat/></div>\n                </MediaQuery>\n                <MediaQuery minDeviceWidth={769}>\n                    <header>\n                        <div className={'ext_btn'} onClick={this.redirect}>Вихід</div>\n                    </header>\n                    <Chat/>\n                </MediaQuery>\n            </div>\n        )\n\n\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        userReducer: state.userReducer\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        deleteRecipientId: () => dispatch(deleteUserFromState()),\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatPage);\n","import React from 'react';\nimport style from './FormsControls.module.css'\n\nexport const Input = ({input, meta, ...props}) => {\n    const ShowErr = meta.touched && meta.error;\n    return (\n        <div className={style.Input}>\n            <div className={(ShowErr ? style.inputError : '')}>\n                <input {...input} {...props}/>\n            </div>\n            {ShowErr && <span className={style.errorText}>{meta.error}</span>}\n\n        </div>\n    )\n};\n","import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport {required, minLengthCreator, validEmail, matchInput} from '../../utils/validators'\nimport {Input} from '../formComponent/FormsControls'\n\nconst minLength8 = minLengthCreator(8);\nlet RegisterForm = props => {\n\n    const {handleSubmit} = props;\n    return (\n        <form onSubmit={handleSubmit}>\n            <span>Ім'я:</span>\n            <Field className={'inp_txt'} component={Input}\n                   type=\"text\" name=\"name\"\n                   validate={[required]}/>\n            <span>Фамілія:</span>\n            <Field className={'inp_txt'} component={Input}\n                   type=\"text\" name=\"surname\" placeholder=\"Surname\"\n                   validate={[required]}/>\n            <span>Email:</span>\n            <Field className={'inp_txt'} component={Input}\n                   type=\"text\" name=\"email\" placeholder=\"E-mail\"\n                   validate={[required, validEmail]}/>\n            <span>Пароль:</span>\n            <Field className={'inp_pass'} component={Input}\n                   type=\"password\" name=\"password\" placeholder=\"Password\"\n                   validate={[required, minLength8]}/>\n            <span>Повторіть пароль:</span>\n            <Field className={'inp_pass'} component={Input}\n                   type=\"password\" name=\"password2\"\n                   placeholder=\"Retype password\"\n                   validate={[required, matchInput]}/>\n\n            <button className={'inp_sbm'} type=\"submit\" label=\"submit\">Зареєструватися</button>\n        </form>\n    );\n\n};\n\n\nRegisterForm = reduxForm({\n    form: 'login',\n})(RegisterForm);\n\nexport default RegisterForm;","import React, {Component} from 'react';\nimport {Redirect} from 'react-router-dom'\nimport {connect} from \"react-redux\";\nimport RegisterForm from '../../components/registerForm'\nimport {dataIsSending} from \"../../actions/registration-actions\";\n\n\n\nimport './Registration.css'\n\nclass Registration extends Component {\n\n    submit = form => {\n        this.props.SendRegisterData(form);\n\n    };\n\n    render() {\n\n        const {isRegister} = this.props.registrationRedux;\n\n        if (isRegister) {\n            alert('Ви успішно зареєструвались');\n            return <Redirect to={'/SingIn'}/>\n        }\n\n        return (\n            <div>\n                <div id=\"login-box\">\n                    <div className=\"left\">\n                        <h1>Реєстрація</h1>\n                        <RegisterForm onSubmit={this.submit}/>\n                    </div>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        registrationRedux: state.registrationRedux\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        SendRegisterData: (form) => dispatch(dataIsSending(form))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Registration)","import {DATA_IS_SENDING} from '../../action-types/registration-actionTypes'\n\n\nexport const dataIsSending = (form) => {\n    return {\n        type: DATA_IS_SENDING,\n        form\n    }\n};\n","export const REGISTER_IS_ERROR = 'REGISTER_IS_ERROR';\nexport const DATA_IS_SENDING = 'DATA_IS_SENDING';\nexport const REGISTER_IS_SUCCESS = 'REGISTER_IS_SUCCESS';","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {Input} from '../formComponent/FormsControls'\r\nimport {required} from \"../../utils/validators\";\r\n\r\n\r\nlet SingInForm = props => {\r\n    const {handleSubmit} = props;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <span>Email:</span>\r\n            <Field className={'inp_txt'} component={Input}\r\n                   type=\"text\" name=\"email\" placeholder=\"Email\" validate={[required]}/>\r\n            <span>Пароль:</span>\r\n            <Field className={'inp_txt'} component={Input}\r\n                   type=\"password\" name=\"password\" placeholder=\"Password\" validate={[required]}/>\r\n\r\n            <button className={'inp_sbm'} type=\"submit\" label=\"submit\">Увійти</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nSingInForm = reduxForm({\r\n    form: 'Auth',\r\n})(SingInForm);\r\n\r\nexport default SingInForm;","import React, {Component} from 'react';\nimport SingInForm from \"../../components/singInForm\";\n\nimport './SingIn.css'\nimport {authIsSending, logout} from \"../../actions/auth-actions\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {interceptors} from \"../../interceptors/auth.interceptor\";\n\nclass SingIn extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {redirect: false}\n    }\n\n    componentDidMount() {\n        this.props.logout();\n        localStorage.removeItem('user')\n    }\n\n    submit = ({email, password}) => {\n        this.props.authUser(email, password)\n\n    };\n\n    redirect = () => {\n        this.setState({redirect: true})\n    };\n\n    render() {\n\n        if (this.props.auth.result) {\n            if (this.props.auth.result.success) {\n                const data = this.props.auth.result.msg;\n\n                const userObj = {token: data, isLogged: true};\n                localStorage.setItem('user', JSON.stringify(userObj));\n                const user = JSON.parse(localStorage.getItem('user'));\n                const token = user.token;\n                interceptors(token);\n                if (this.props.auth.result.success === true && token !== undefined || null) return <Redirect\n                    from={'/SingIn'}\n                    to={'/'}/>\n            }\n\n        }\n        if (this.state.redirect) {\n            return <Redirect\n                from={'/SingIn'}\n                to={'/registration'}/>\n        }\n        if (this.props.auth.errorStatus === 500) {\n            alert('Неправильний Email або пароль');\n            return (\n                <div>\n                    <div id=\"login-box\">\n                        <div className=\"left\">\n                            <h1>Вхід</h1>\n\n                            <SingInForm onSubmit={this.submit}/>\n                            <div className={'redirectToRegPage'}>\n                                <span>Ви тут вперше? </span>\n                                <span className={'redirectBtn'} onClick={this.redirect}>Зареєструватися</span>\n                            </div>\n                        </div>\n\n                    </div>\n\n                </div>\n            )\n        }\n        return (\n            <div>\n                <div id=\"login-box\">\n                    <div className=\"left\">\n                        <h1>Вхід</h1>\n\n                        <SingInForm onSubmit={this.submit}/>\n                        <div className={'redirectToRegPage'}>\n                            <span>Ви тут вперше? </span>\n                            <span className={'redirectBtn'} onClick={this.redirect}>Зареєструватися</span>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n        )\n\n    }\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        auth: state.auth,\n\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        authUser: (email, password) => dispatch(authIsSending(email, password)),\n        logout: () => dispatch(logout())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingIn)","import React from 'react';\nimport {Route, Redirect} from \"react-router-dom\";\n\n\nconst GuardedRoute = ({component: Component, auth, ...rest}) => {\n    //It's govno code =)\n\n    const userObj = JSON.parse(localStorage.getItem('user'));\n\n    let isLogged = false;\n    if (userObj) isLogged = userObj.isLogged;\n    return (\n        <Route {...rest} render={(props) => (\n            isLogged === true\n                ? <Component {...props} />\n                : <Redirect to='/SingIn'/>\n        )}/>\n    )\n};\n\nexport default GuardedRoute;\n\n","import React, {Component} from 'react';\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nimport './App.css';\nimport ChatPage from '../../containers/chatPage'\nimport Registration from '../../containers/registrationPage'\nimport SingIn from '../../containers/SingInPage'\nimport GuardedRoute from '../../utils/guardedRoute';\nimport {interceptors} from \"../../interceptors/auth.interceptor\";\nimport {connect} from \"react-redux\";\nimport {sendDataForCheck} from \"../../actions/checkUser-actions\";\nimport {logout} from \"../../actions/auth-actions\";\n\n\nclass App extends Component {\n\n\n    render() {\n        const user = localStorage.getItem('user');\n\n        if (user !== null) {\n            const userObj = JSON.parse(localStorage.getItem('user'));\n            interceptors(userObj.token);\n\n        }\n        return (\n            <Switch>\n                <GuardedRoute path={'/'} component={ChatPage} exact={true}/>\n                <Route path={'/registration'}>\n                    <Registration/>\n                </Route>\n                <Route path={'/SingIn'}>\n                    <SingIn/>\n                </Route>\n            </Switch>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        userCheck: state.userCheck\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        checkUser: () => dispatch(sendDataForCheck()),\n        logout: () => dispatch(logout())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n    messages:[],\n    endpoint: 'http://localhost:8080/',\n\n}","import {combineReducers} from 'redux';\nimport {reducer as formReducer} from 'redux-form';\nimport {messageReducer} from './message.redux'\nimport {registrationRedux} from './registration.redux'\nimport  auth from './auth.redux'\nimport {userReducer} from './users.redux'\nimport userCheck from './checkUser.redux'\nimport {LOGOUT_USER} from \"../action-types/auth-actionTypes\";\n\nconst appReducer = combineReducers({\n    form: formReducer,\n    messageReducer,\n    registrationRedux,\n    auth,\n    userReducer,\n    userCheck\n});\n\nconst rootReducer = (state, action) => {\n    if (action.type === LOGOUT_USER) {\n        console.log('LOGOUT_USER');\n        state = undefined;\n    }\n    return appReducer(state, action)\n};\n\nexport default rootReducer;","import {SAVE_MESSAGE_TO_STATE, MESSAGES_HAS_LOADED, ERROR_LOADING} from '../action-types/messages-actionTypes'\nimport initialState from './inithialState'\nimport {v1 as uuidv1} from 'uuid';\n\nexport const messageReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SAVE_MESSAGE_TO_STATE:\n\n            const newMsg = {\n                _id: uuidv1(),\n                text: action.action.msg,\n                userRecipient: {\n                    id: action.action.userRecipientId,\n                    name: action.action.userRecipientName\n                },\n                userSender: {\n                    id: action.action.senderId,\n                    name: action.action.senderName\n                },\n                date: new Date()\n            };\n            state = {\n                ...state,\n                messages: [...state.messages, newMsg]\n            };\n\n            break;\n\n        case MESSAGES_HAS_LOADED:\n\n            state = {\n                ...state,\n                messages: action.res.data.messages\n            };\n            break;\n        case ERROR_LOADING:\n            state = {\n\n                loadingError: action.Error.data,\n                errorStatus: action.Error.status\n            };\n        /* falls through */\n        default:\n            return state\n    }\n    return state\n};","import {REGISTER_IS_SUCCESS} from '../action-types/registration-actionTypes'\n\n\nexport const registrationRedux = (state = [], action) => {\n    switch (action.type) {\n        case REGISTER_IS_SUCCESS:\n            return {\n                ...state,\n                isRegister:action.res.data.success\n            };\n\n        default :\n            return state\n    }\n}","import {AUTH_IS_SUCCESS, AUTH_IS_ERROR} from '../action-types/auth-actionTypes'\r\n\r\n\r\nexport default function auth(state = [], action) {\r\n    switch (action.type) {\r\n        case AUTH_IS_SUCCESS:\r\n            return {...state, result: action.res};\r\n\r\n        case AUTH_IS_ERROR:\r\n            return {\r\n                ...state,\r\n                errorStatus: action.Error.status,\r\n                errorData: action.Error.data\r\n            };\r\n        default :\r\n            return state\r\n    }\r\n};\r\n\r\n","import {\n    USERS_LISTS_HAS_LOADED,\n    SAVE_USER_RECIPIENT,\n    ERROR_LOAD_LIST,\n    DELETE_USER_RECIPIENT_FROM_STATE\n} from '../action-types/users-actionTypes'\n\n\nexport const userReducer = (state = [], action) => {\n    switch (action.type) {\n        case USERS_LISTS_HAS_LOADED:\n            return {\n                ...state,\n                list: action.res\n            };\n\n        case SAVE_USER_RECIPIENT:\n\n            return {\n                ...state,\n                recipientUser: {\n                    id: action.res.id,\n                    name: action.res.name\n                }\n            };\n\n        case ERROR_LOAD_LIST:\n            return {\n                loadingError: action.Error.data,\n                errorStatus: action.Error.status\n            };\n\n        case  DELETE_USER_RECIPIENT_FROM_STATE:\n            return {\n                ...state,\n                recipientUser: null\n            };\n        default :\n            return state\n\n    }\n};\n\n","import {SUCCESS_USER_CHECK, ERROR_USER_CHECK,} from '../action-types/checkUser-actionTypes'\n\n\nexport default function userCheck(state = [], action) {\n\n    switch (action.type) {\n        case SUCCESS_USER_CHECK:\n            console.log(action);\n            return action.response;\n        case ERROR_USER_CHECK:\n            state = {\n                checkError: action.Error.data,\n                errorStatus: action.Error.status\n            };\n        /* falls through */\n        default:\n            return state\n    }\n}","import axios from 'axios'\nimport {backUrl} from '../constants/apiUrl'\n\n\nclass UserCheck {\n    checkUser = () => axios.get(`${backUrl}/auth/check`)\n        .then(res => {\n\n            return res.data;\n        })\n\n}\n\nexport default new UserCheck()","import { put, call } from 'redux-saga/effects';\nimport UserCheck from '../services/userCheck.service'\n\nimport {SUCCESS_USER_CHECK, ERROR_USER_CHECK} from '../action-types/checkUser-actionTypes';\nconst {checkUser} = UserCheck;\nexport function* userCheckSaga(actions) {\n\n    try {\n        console.log(actions);\n        const response = yield call(checkUser, actions);\n        console.log(response);\n        yield put({ type: SUCCESS_USER_CHECK, response });\n\n\n    } catch(error) {\n        const Error = error.response;\n        yield put({ type: ERROR_USER_CHECK, Error });\n    }\n}\n\n","import axios from 'axios'\nimport {backUrl} from '../constants/apiUrl'\n\nclass AuthService {\n    authUser = (email, password) => axios.post(`${backUrl}/auth`, {email, password})\n        .then(res => {\n            console.log(res);\n            return res.data;\n        })\n}\n\nexport default new AuthService()","import { put, call } from 'redux-saga/effects';\nimport AuthService from '../services/auth.service'\n\nimport {AUTH_IS_SUCCESS,AUTH_IS_ERROR, LOGOUT_USER } from '../action-types/auth-actionTypes';\nconst {authUser} = AuthService;\nexport function* AuthUser(action) {\n\n    try {\n\n        const res = yield call(authUser, action.email, action.password);\n\n        yield put({type: AUTH_IS_SUCCESS, res})\n\n    } catch (error) {\n        const Error = error.response;\n        yield put({type: AUTH_IS_ERROR, Error})\n\n    }\n}\nexport  function* logout () {\n    try {\n        yield put({ type: LOGOUT_USER})\n\n    } catch(error) {\n        console.log(error);\n\n    }\n}\n\n\n\n","import axios from 'axios'\nimport {backUrl} from '../constants/apiUrl'\n\n\nclass messageSevice {\n\n    getMessages = (userRecipientId, token) => axios.post(`${backUrl}/message/get`, {id: userRecipientId, token} )\n\n}\n\nexport default new messageSevice()","\n\nexport const sendPrivateMessage = (socket, userRecipientId, userRecipientName, msg, senderId, senderName) => {\n    socket.emit('msg', {userRecipientId, userRecipientName, msg, senderId, senderName, date: new Date()}, data => {\n        // console.log(data);\n        return data\n    });\n\n    socket.on('privateMsg', data => {\n        console.log(data);\n    })\n};\n\n\n\n\n\n\n","import {put, call} from 'redux-saga/effects';\n\nimport messageSevice from '../services/message.service'\nimport {\n    SAVE_MESSAGE_TO_STATE,\n    ERROR_SEND,\n    MESSAGES_HAS_LOADED,\n    ERROR_LOADING\n} from '../action-types/messages-actionTypes';\nimport {sendPrivateMessage} from \"../services/socket.service\";\n\n\nexport function* sendMessage(action) {\n    try {\n\n        yield call(\n            sendPrivateMessage,\n            action.socket,\n            action.userRecipientId,\n            action.userRecipientName,\n            action.msg, action.senderId,\n            action.senderName\n        );\n\n        yield put({type: SAVE_MESSAGE_TO_STATE, action})\n    } catch (error) {\n        yield put({type: ERROR_SEND, error});\n    }\n}\n\nexport function* getMessage(action) {\n    const {getMessages} = messageSevice;\n    try {\n\n        const res = yield call(\n            getMessages,\n            action.id,\n            action.token\n        );\n        yield put({type: MESSAGES_HAS_LOADED, res});\n\n    } catch (error) {\n        const Error = error.response;\n        console.log(Error);\n        yield put({type: ERROR_LOADING, Error});\n    }\n}\n\nexport function* saveNewPrivateMessage(action) {\n\n    try {\n\n        yield put({type: SAVE_MESSAGE_TO_STATE, action});\n\n    } catch (error) {\n\n        // yield put({type: ERROR_SEND, error});\n    }\n}\n\n","import axios from 'axios'\nimport {backUrl} from '../constants/apiUrl'\n\nclass UsersService {\n    getUsersList = (_id, token) => axios.post(`${backUrl}/users/lists` ,{id: _id, token})\n\n}\n\nexport default new UsersService()","import {put, call} from 'redux-saga/effects';\nimport UsersService from '../services/users.service';\n\nimport {ERROR_LOAD_LIST, USERS_LISTS_HAS_LOADED, SAVE_USER_RECIPIENT} from '../action-types/users-actionTypes';\n\n\nexport function* fetchUsersList(action) {\n    try {\n        const {getUsersList} = UsersService;\n        const res = yield call(\n            getUsersList,\n            action.id,\n            action.token\n        );\n        yield put({type: USERS_LISTS_HAS_LOADED, res});\n    } catch (error) {\n        const Error = error.response;\n        yield put({type: ERROR_LOAD_LIST, Error});\n    }\n}\n\nexport function* saveRecipientId (action) {\n    try {\n        const res = {id: action.id, name: action.name};\n\n        yield put({type: SAVE_USER_RECIPIENT,res });\n    } catch (error) {\n        yield put({type: ERROR_LOAD_LIST, error});\n    }\n}\n\n","import axios from 'axios'\nimport {backUrl} from '../constants/apiUrl'\n\nclass RegistrationService {\n    sendRegisterDatas = (form) => axios.post(`${backUrl}/registration`, {form})\n}\n\nexport default new RegistrationService()","import { put, call } from 'redux-saga/effects';\nimport RegistrationService from '../services/registration.service'\nimport {REGISTER_IS_SUCCESS} from '../action-types/registration-actionTypes'\n\nconst {sendRegisterDatas} = RegistrationService;\nexport function* registrationUser (action) {\n\n    try {\n\n        const res = yield call(sendRegisterDatas, action.form);\n        yield put({type: REGISTER_IS_SUCCESS, res })\n\n    } catch(error) {\n        console.log(error);\n\n    }\n}\n\n","import {takeEvery} from 'redux-saga/effects';\nimport {userCheckSaga} from './checkUser.saga'\nimport {AuthUser, logout} from './auth.saga'\nimport {sendMessage, getMessage, saveNewPrivateMessage} from './chat.saga'\nimport {fetchUsersList, saveRecipientId} from './user.saga'\nimport {registrationUser} from './registration.saga'\n\nimport {SEND_DATA_FOR_CHECK} from '../action-types/checkUser-actionTypes';\nimport {AUTH_IS_SENDING, LOGOUT} from '../action-types/auth-actionTypes';\nimport {GET_MESSAGES, SEND_MESSAGE, SAVE_NEW_PRIVATE_MSG} from '../action-types/messages-actionTypes';\nimport {FETCH_FOR_LIST, SAVE_USER_RECIPIENT_TO_STATE} from '../action-types/users-actionTypes';\nimport {DATA_IS_SENDING} from '../action-types/registration-actionTypes';\n\n\nexport function* watchUserCheck() {\n    yield takeEvery(SEND_DATA_FOR_CHECK, userCheckSaga);\n\n}\n\nexport function* watchAuthUser() {\n\n    yield takeEvery(AUTH_IS_SENDING, AuthUser);\n    yield takeEvery(LOGOUT, logout);\n}\n\nexport function* watchChat() {\n    yield takeEvery(SEND_MESSAGE, sendMessage);\n    yield takeEvery(GET_MESSAGES, getMessage);\n    yield takeEvery(SAVE_NEW_PRIVATE_MSG, saveNewPrivateMessage);\n}\n\nexport function* watchUser() {\n    yield takeEvery(FETCH_FOR_LIST, fetchUsersList);\n    yield takeEvery(SAVE_USER_RECIPIENT_TO_STATE, saveRecipientId)\n}\nexport function* watchRegistrationUser() {\n    yield takeEvery(DATA_IS_SENDING, registrationUser)\n}","import {fork, all} from 'redux-saga/effects';\nimport {watchAuthUser, watchUserCheck, watchChat, watchUser, watchRegistrationUser} from './watchers';\n\nexport default function* startForman() {\n    yield all([fork(watchAuthUser),\n    fork(watchUserCheck),\n    fork(watchChat),\n    fork(watchUser),\n    fork(watchRegistrationUser)\n])\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './components/app/App';\n\nimport {Provider} from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from \"./store/store\";\nimport {BrowserRouter} from \"react-router-dom\";\nconst store = configureStore();\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import {createStore, applyMiddleware} from 'redux';\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from '../reducer';\nimport rootSaga from '../sagas';\n\nexport default function configureStore() {\n    const sagaMiddleware = createSagaMiddleware();\n\n    return {\n        ...createStore(rootReducer, applyMiddleware(sagaMiddleware)),\n        runSaga: sagaMiddleware.run(rootSaga)\n    }\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputError\":\"FormsControls_inputError__1QAwK\",\"errorText\":\"FormsControls_errorText__1zGvg\",\"Input\":\"FormsControls_Input__184BB\"};"],"sourceRoot":""}